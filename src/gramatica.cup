import java_cup.runtime.*;
import ast.*;

parser code{:

:}
action code {:
	private boolean debug=true;
	private NodoBase ast = null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	
:}

/* Nodos terminales */

terminal PROG;
terminal NUM;
terminal ID;
terminal IF;
terminal ELSE;
terminal DO;
terminal WHILE;
terminal ASIGNA;
terminal MAS;
terminal MOD;
terminal IGUAL;
terminal POR;
terminal MENOS;
terminal ENTRE;
terminal LPAR;
terminal RPAR;
terminal PCOMA;
terminal MQ;
terminal mQ;
terminal MIGUAL;
terminal mIGUAL;
terminal DIF;
terminal AND;
terminal OR;
terminal NOT;
terminal FOR;
terminal INT;
terminal BOOL;
terminal LBRACK;
terminal RBRACK;
terminal LCOR;
terminal RCOR;
terminal TRUE;
terminal FALSE;
terminal AVANZAR;
terminal MIRARABAJO;
terminal MIRARARRIBA;
terminal MIRARIZQ;
terminal MIRARDER;

/* Nodos no terminales*/

non terminal NodoBase programa;
non terminal NodoBase seq;
non terminal NodoBase sent;
non terminal NodoBase func;
non terminal NodoBase declar;
non terminal NodoBase ciclow;
non terminal NodoBase cfor;
non terminal NodoBase asigna;
non terminal NodoBase sentif;
non terminal NodoBase valog;
non terminal NodoBase ident;
non terminal NodoBase expr;
non terminal NodoBase expl;
non terminal NodoBase expa;
non terminal NodoBase expn;

/* Reglas gramaticales */
programa ::= PROG LPAR RPAR LBRACK seq:s RBRACK {: 
		System.out.println("Regla programa");
		ast = s;
:}
;
seq ::= sent:ini PCOMA seq:sent {: 
				System.out.println("Regla SEQ 1");
					NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
				
		  :}
		| sent:sen PCOMA {:
				System.out.println("Regla SEQ 2");
				RESULT = sen;
		:}
		| sent:sen {:
				System.out.println("Regla SEQ 3");
				RESULT = sen;
		:}		
;
sent ::= func:fun {:
 				System.out.println("Regla SENT - FUNC");	
 				RESULT = fun;
		:}
		| declar:decl {:
				System.out.println("Regla SENT - DECLAR");	
				RESULT = (NodoIdentificador)decl;	
		:}
		| ciclow:ciclo {:
				System.out.println("Regla SENT - CICLOW");
				RESULT = ciclo;
		:}
		| asigna:asig {:
				System.out.println("Regla SENT - ASIGNA");
				RESULT = asig;
		:}
		|cfor:cfor {:
				System.out.println("Regla SENT - CFOR");
				RESULT = cfor;
		:}
		| sentif:sent_if {:
				System.out.println("Regla SENT - SENTIF");
				RESULT = sent_if;
		:}
;
expr ::= NUM:valor {:
				System.out.println("Regla EXPR - NUM");
					if(valor!=null){
						RESULT= new NodoValor(Integer.parseInt(valor.toString()));					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
		:}
		| valog:valor {:
				System.out.println("Regla EXPR - VALOG");
				RESULT = valor;
		:}
		| ID:ident {:
				System.out.println("Regla EXPR - ID");
				RESULT = new NodoIdentificador(ident.toString(),-1);
		:}
;
func ::= AVANZAR LPAR NUM RPAR{:
				System.out.println("Regla FUNC - AVANZAR(num)");
		:}
		| AVANZAR LPAR ident RPAR{:
				System.out.println("Regla FUNC - AVANZAR(id)");
		:}
		| MIRARABAJO LPAR RPAR{:
				System.out.println("Regla FUNC - MIRARABAJO()");
		:}
		| MIRARARRIBA LPAR RPAR{:
				System.out.println("Regla FUNC - MIRARARRIBA()");
		:}
		| MIRARIZQ LPAR RPAR{:
				System.out.println("Regla FUNC - MIRARIZQ()");
		:}
		| MIRARDER LPAR RPAR{:
				System.out.println("Regla FUNC - MIRARDER()");
		:}
;
declar ::= INT ID:ident {:
				System.out.println("Regla DECLAR - INT IDENT ");			
				RESULT = new NodoIdentificador(ident.toString(), 0);		
		:}
		| INT ID:ident LCOR expa:exp RCOR {:
				System.out.println("Regla DECL - INT IDENT[expa]");
				RESULT =  new NodoVector(new NodoIdentificador(ident.toString()), Integer.parseInt(exp.toString()) , 0);					
		:}
		| BOOL ID:ident {:
				System.out.println("Regla DECLAR - BOOL IDENT");
				RESULT = new NodoIdentificador(ident.toString(), 1);
		:}

		| BOOL ID:ident LCOR expa:exp RCOR {:
				System.out.println("Regla DECL - BOOOOOOOOLL IDENT[expa]");
				RESULT = new NodoVector(new NodoIdentificador(ident.toString()), Integer.parseInt(exp.toString()) , 1);
		:}		
;
valog ::= TRUE {:
			System.out.println("TRUE");
			RESULT = new NodoBool(true);
		:}
		| FALSE {:
			System.out.println("FALSE");
			RESULT = new NodoBool(false);
		:}
;
ciclow ::= DO LBRACK seq:lista RBRACK WHILE LPAR expl:test RPAR {:
			System.out.println("Regla CICLOW");
			RESULT = new NodoWhile(test, lista);
		:}
;
asigna ::= ID:aidi ASIGNA expa:expaa {:
			System.out.println("Regla ASIGNA ");
			RESULT = new NodoAsignacion(new NodoIdentificador(aidi.toString()), expaa);
		:}	
;
expl ::= expr:eI MQ expl:eD {:
			System.out.println("Regla EXPL - >");
			RESULT = new NodoOperacion(eI,tipoOp.mayor,eD);
		:}
		| expr:eI mQ expl:eD {:
			System.out.println("Regla EXPL - <");
			RESULT = new NodoOperacion(eI,tipoOp.menor,eD);
		:}			
		| expr:eI MIGUAL expl:eD {:
			System.out.println("Regla EXPL - >=");
			RESULT = new NodoOperacion(eI,tipoOp.mayorigual,eD);
		:}
		| expr:eI mIGUAL expl:eD {:
			System.out.println("Regla EXPL - <=");
			RESULT = new NodoOperacion(eI,tipoOp.menorigual,eD);
		:}
		| expr:eI IGUAL expl:eD {:
			System.out.println("Regla EXPL - =");
			RESULT = new NodoOperacion(eI,tipoOp.igual,eD);
		:}
		| expr:eI DIF expl:eD {:
			System.out.println("Regla EXPL - <>");
			RESULT = new NodoOperacion(eI,tipoOp.diferente,eD);
		:}
		| expr:eI AND expl:eD {:
			System.out.println("Regla EXPL - &&");
			RESULT = new NodoOperacion(eI,tipoOp.y,eD);
		:}
		| expr:eI OR expl:eD {:
			System.out.println("Regla EXPL - ||");
			RESULT = new NodoOperacion(eI,tipoOp.o,eD);
		:}
		| expr:eI NOT expl:eD {:
			System.out.println("Regla EXPL - !");
			RESULT = new NodoOperacion(eI,tipoOp.no,eD);
		:}			
		| expr:expre {:
			System.out.println("Regla EXPL - 2");
			RESULT = expre;			
		:}
		| LPAR expn:expen RPAR {:
			System.out.println("Regla EXPL - (EXPN)");
			RESULT = expen;
		:}
;
expn ::= NOT expr:ext {:
			System.out.println("Regla EXPN ");
			RESULT = new NodoOperacion( ext, tipoOp.no , null); 
		:}
;
expa ::= expr:eI MAS expa:eD {:
			System.out.println("Regla EXPA - +");
			RESULT = new NodoOperacion(eI,tipoOp.mas,eD);
		:}
		|expr:eI MENOS expa:eD {:
			System.out.println("Regla EXPA - -");
			RESULT = new NodoOperacion(eI,tipoOp.menos,eD);
		:}		
		|expr:eI POR expa:eD {:
			System.out.println("Regla EXPA - *");
			RESULT = new NodoOperacion(eI,tipoOp.por,eD);
		:}	
		|expr:eI ENTRE expa:eD {:
			System.out.println("Regla EXPA - /");
			RESULT = new NodoOperacion(eI,tipoOp.entre,eD);
		:}	
		|expr:eI MOD expa:eD {:
			System.out.println("Regla EXPA - %");
			RESULT = new NodoOperacion(eI,tipoOp.modulo,eD);
		:}				
		| LPAR expa:expe RPAR {:
			System.out.println("Regla EXPA - (expa) ");
			RESULT = expe;
		:}
		| expr:expre {:
			System.out.println("Regla EXPL - 2");
			RESULT = expre;			
		:}		
;
sentif ::= IF LPAR expl:test RPAR LBRACK seq:lista RBRACK {:
			System.out.println("Regla SENTIF - IF simple");
			RESULT = new NodoIf(test, lista);
		:}
		|IF LPAR expl:prueba RPAR LBRACK seq:lista RBRACK ELSE LBRACK seq:selse RBRACK {:
			System.out.println("Regla SENTIF - IF-ELSE");
			RESULT = new NodoIf(prueba, lista, selse);
		:}
;
cfor ::= FOR LPAR asigna:as PCOMA expa:inc PCOMA expl:prueba RPAR LBRACK seq:lista RBRACK {:
			System.out.println("Regla CFOR");
			RESULT = new NodoFor(as,prueba,inc,lista);
		:}
;