
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 25 16:15:16 VET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 25 16:15:16 VET 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\010\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\005\006\000\002\005" +
    "\006\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\006\004\000\002\006\007\000" +
    "\002\006\007\000\002\013\003\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\015\004\000\002\015" +
    "\003\000\002\007\012\000\002\011\005\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\017\005\000\002\017" +
    "\003\000\002\017\005\000\002\022\004\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\020\005\000\002\020\005\000\002" +
    "\012\011\000\002\012\015\000\002\010\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\004\004\001\002\000\004\022\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\023\010\001\002\000\004\040\011\001\002\000" +
    "\030\006\016\007\015\011\017\035\034\036\013\037\032" +
    "\046\026\047\027\050\023\051\031\052\033\001\002\000" +
    "\004\006\123\001\002\000\004\006\uffea\001\002\000\006" +
    "\024\ufffc\041\ufffc\001\002\000\004\022\144\001\002\000" +
    "\004\013\142\001\002\000\004\040\133\001\002\000\006" +
    "\024\ufff8\041\ufff8\001\002\000\006\024\ufff7\041\ufff7\001" +
    "\002\000\004\041\132\001\002\000\004\022\130\001\002" +
    "\000\006\024\ufffa\041\ufffa\001\002\000\006\024\ufffb\041" +
    "\ufffb\001\002\000\004\022\121\001\002\000\004\022\117" +
    "\001\002\000\006\024\ufff9\041\ufff9\001\002\000\004\022" +
    "\115\001\002\000\004\006\uffe9\001\002\000\004\022\113" +
    "\001\002\000\004\022\040\001\002\000\006\024\036\041" +
    "\ufffd\001\002\000\032\006\016\007\015\011\017\035\034" +
    "\036\013\037\032\041\ufffe\046\026\047\027\050\023\051" +
    "\031\052\033\001\002\000\004\041\uffff\001\002\000\004" +
    "\006\016\001\002\000\004\024\042\001\002\000\004\022" +
    "\044\001\002\000\016\014\056\015\054\017\062\020\060" +
    "\021\057\024\061\001\002\000\012\005\045\006\046\044" +
    "\047\045\051\001\002\000\046\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\041\ufff6\043\ufff6\001\002\000\046\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\041\ufff4\043\ufff4\001\002\000\046\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\041\uffe8\043\uffe8\001\002\000\046\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\041\ufff5\043\ufff5\001\002\000\046\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\041\uffe7\043\uffe7\001\002\000\004\023" +
    "\053\001\002\000\020\014\uffcf\015\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\024\uffcf\043\uffcf\001\002\000\012\005\uffd1\006" +
    "\uffd1\044\uffd1\045\uffd1\001\002\000\012\005\045\006\046" +
    "\044\047\045\051\001\002\000\012\005\uffd5\006\uffd5\044" +
    "\uffd5\045\uffd5\001\002\000\012\005\uffd2\006\uffd2\044\uffd2" +
    "\045\uffd2\001\002\000\012\005\uffd4\006\uffd4\044\uffd4\045" +
    "\uffd4\001\002\000\014\005\045\006\046\022\064\044\047" +
    "\045\051\001\002\000\012\005\uffd3\006\uffd3\044\uffd3\045" +
    "\uffd3\001\002\000\004\024\105\001\002\000\004\034\102" +
    "\001\002\000\030\016\074\023\uffd8\024\uffd8\025\075\026" +
    "\073\027\071\030\067\031\070\032\066\033\077\034\076" +
    "\001\002\000\014\005\uffdc\006\uffdc\022\uffdc\044\uffdc\045" +
    "\uffdc\001\002\000\014\005\uffdf\006\uffdf\022\uffdf\044\uffdf" +
    "\045\uffdf\001\002\000\014\005\uffdd\006\uffdd\022\uffdd\044" +
    "\uffdd\045\uffdd\001\002\000\014\005\uffe0\006\uffe0\022\uffe0" +
    "\044\uffe0\045\uffe0\001\002\000\014\005\045\006\046\022" +
    "\064\044\047\045\051\001\002\000\014\005\uffe1\006\uffe1" +
    "\022\uffe1\044\uffe1\045\uffe1\001\002\000\014\005\uffde\006" +
    "\uffde\022\uffde\044\uffde\045\uffde\001\002\000\014\005\uffe2" +
    "\006\uffe2\022\uffe2\044\uffe2\045\uffe2\001\002\000\014\005" +
    "\uffdb\006\uffdb\022\uffdb\044\uffdb\045\uffdb\001\002\000\014" +
    "\005\uffda\006\uffda\022\uffda\044\uffda\045\uffda\001\002\000" +
    "\006\023\uffd9\024\uffd9\001\002\000\004\023\104\001\002" +
    "\000\012\005\045\006\046\044\047\045\051\001\002\000" +
    "\004\023\uffd6\001\002\000\006\023\uffd7\024\uffd7\001\002" +
    "\000\004\023\106\001\002\000\004\040\107\001\002\000" +
    "\030\006\016\007\015\011\017\035\034\036\013\037\032" +
    "\046\026\047\027\050\023\051\031\052\033\001\002\000" +
    "\004\041\111\001\002\000\006\024\uffcc\041\uffcc\001\002" +
    "\000\020\014\uffd0\015\uffd0\017\uffd0\020\uffd0\021\uffd0\024" +
    "\uffd0\043\uffd0\001\002\000\004\023\114\001\002\000\006" +
    "\024\uffee\041\uffee\001\002\000\004\023\116\001\002\000" +
    "\006\024\uffef\041\uffef\001\002\000\004\023\120\001\002" +
    "\000\006\024\ufff1\041\ufff1\001\002\000\006\005\122\006" +
    "\123\001\002\000\004\023\127\001\002\000\014\005\126" +
    "\023\uffe5\024\uffe5\041\uffe5\042\uffe5\001\002\000\004\023" +
    "\125\001\002\000\006\024\ufff2\041\ufff2\001\002\000\012" +
    "\023\uffe6\024\uffe6\041\uffe6\042\uffe6\001\002\000\006\024" +
    "\ufff3\041\ufff3\001\002\000\004\023\131\001\002\000\006" +
    "\024\ufff0\041\ufff0\001\002\000\004\002\001\001\002\000" +
    "\030\006\016\007\015\011\017\035\034\036\013\037\032" +
    "\046\026\047\027\050\023\051\031\052\033\001\002\000" +
    "\004\041\135\001\002\000\004\012\136\001\002\000\004" +
    "\022\137\001\002\000\014\005\045\006\046\022\064\044" +
    "\047\045\051\001\002\000\004\023\141\001\002\000\006" +
    "\024\uffe4\041\uffe4\001\002\000\012\005\045\006\046\044" +
    "\047\045\051\001\002\000\006\024\uffe3\041\uffe3\001\002" +
    "\000\014\005\045\006\046\022\064\044\047\045\051\001" +
    "\002\000\004\023\146\001\002\000\004\040\147\001\002" +
    "\000\030\006\016\007\015\011\017\035\034\036\013\037" +
    "\032\046\026\047\027\050\023\051\031\052\033\001\002" +
    "\000\004\041\151\001\002\000\010\010\152\024\uffce\041" +
    "\uffce\001\002\000\004\040\153\001\002\000\030\006\016" +
    "\007\015\011\017\035\034\036\013\037\032\046\026\047" +
    "\027\050\023\051\031\052\033\001\002\000\004\041\155" +
    "\001\002\000\006\024\uffcd\041\uffcd\001\002\000\010\024" +
    "\uffed\041\uffed\042\157\001\002\000\014\005\045\006\046" +
    "\022\044\044\047\045\051\001\002\000\016\014\056\015" +
    "\054\017\062\020\060\021\057\043\163\001\002\000\004" +
    "\043\162\001\002\000\006\024\uffec\041\uffec\001\002\000" +
    "\006\024\uffeb\041\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\161\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\021\004\034\005\013\006\024\007" +
    "\023\010\017\011\027\012\020\013\011\001\001\000\004" +
    "\015\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\036\004\034\005\013\006\024\007" +
    "\023\010\017\011\027\012\020\013\011\001\001\000\002" +
    "\001\001\000\004\011\040\001\001\000\002\001\001\000" +
    "\004\020\042\001\001\000\004\023\054\001\001\000\006" +
    "\014\047\016\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\047\016\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\047\016\064\017" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\100\001\001\000\004\021\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\047\016\064\017\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\047\016\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\107\004\034\005\013\006\024\007\023\010\017\011\027" +
    "\012\020\013\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\133\004\034\005" +
    "\013\006\024\007\023\010\017\011\027\012\020\013\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\047\016\064\017\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\047\016\142\001" +
    "\001\000\002\001\001\000\010\014\047\016\064\017\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\147\004\034\005\013\006\024\007\023\010\017\011\027" +
    "\012\020\013\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\153\004\034\005\013" +
    "\006\024\007\023\010\017\011\027\012\020\013\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\047\016\160\020\157\001\001\000\004\023" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser obj_parser;
		if (args.length==0) 
			obj_parser=new parser(new Scanner(System.in,sf),sf);
		else 
			obj_parser=new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);
		
		obj_parser.parse();	
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cfor ::= FOR LPAR asigna PCOMA expa PCOMA expl PCOMA RPAR LBRACK seq RBRACK 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla CFOR");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cfor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentif ::= IF LPAR expl RPAR LBRACK seq RBRACK ELSE LBRACK seq RBRACK 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla SENTIF - IF-ELSE");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentif",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentif ::= IF LPAR expl RPAR LBRACK seq RBRACK 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla SENTIF - IF simple");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentif",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expa ::= LPAR expr RPAR 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla EXPA - (expr) ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expa",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expa ::= expa opa expr 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla EXPA - 1");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expa",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opa ::= MOD 
            {
              NodoBase RESULT =null;
		
			System.out.println(" % ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opa",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // opa ::= ENTRE 
            {
              NodoBase RESULT =null;
		
			System.out.println(" / ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opa",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // opa ::= POR 
            {
              NodoBase RESULT =null;
		
			System.out.println(" * ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opa",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opa ::= MENOS 
            {
              NodoBase RESULT =null;
		
			System.out.println(" - ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opa",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // opa ::= MAS 
            {
              NodoBase RESULT =null;
		
			System.out.println(" + ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opa",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expn ::= NOT expr 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla EXPN ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expn",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expl ::= LPAR expn RPAR 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla EXPL - (EXPN)");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expl ::= expr 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla EXPL - 2");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expl ::= expr opl expl 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla EXPL - 1");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // opl ::= OR 
            {
              NodoBase RESULT =null;
		
			System.out.println(" || ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opl ::= NOT 
            {
              NodoBase RESULT =null;
		
			System.out.println(" ! ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // opl ::= AND 
            {
              NodoBase RESULT =null;
		
			System.out.println(" && ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opl ::= DIF 
            {
              NodoBase RESULT =null;
		
			System.out.println(" <> ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opl ::= IGUAL 
            {
              NodoBase RESULT =null;
		
			System.out.println(" = ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opl ::= mIGUAL 
            {
              NodoBase RESULT =null;
		
			System.out.println(" <= ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opl ::= MIGUAL 
            {
              NodoBase RESULT =null;
		
			System.out.println(" >= ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opl ::= mQ 
            {
              NodoBase RESULT =null;
		
			System.out.println(" < ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opl ::= MQ 
            {
              NodoBase RESULT =null;
		
			System.out.println(" > ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asigna ::= ID ASIGNA expr 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla ASIGNA ");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ciclow ::= DO LBRACK seq RBRACK WHILE LPAR expl RPAR 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla CICLOW");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclow",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ident ::= ID 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla IDENT - ID");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ident ::= ID NUM 
            {
              NodoBase RESULT =null;
		
			System.out.println("Regla IDENT - ID NUM");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valog ::= FALSE 
            {
              NodoBase RESULT =null;
		
			System.out.println("FALSE");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valog",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valog ::= TRUE 
            {
              NodoBase RESULT =null;
		
			System.out.println("TRUE");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valog",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipodato ::= BOOL 
            {
              NodoBase RESULT =null;
		
			System.out.println("BOOL");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipodato",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipodato ::= INT 
            {
              NodoBase RESULT =null;
		
			System.out.println("INT");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipodato",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declar ::= tipodato ident LCOR expa RCOR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla DECL - TIPO IDENT[expa]");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declar ::= tipodato ident LCOR expr RCOR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla DECL -TIPO IDENT[]");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declar ::= tipodato ident 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla DECLAR - TIPO IDENT");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // func ::= MIRARDER LPAR RPAR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla FUNC - MIRARDER()");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // func ::= MIRARIZQ LPAR RPAR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla FUNC - MIRARIZQ()");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // func ::= MIRARARRIBA LPAR RPAR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla FUNC - MIRARARRIBA()");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func ::= MIRARABAJO LPAR RPAR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla FUNC - MIRARABAJO()");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func ::= AVANZAR LPAR ident RPAR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla FUNC - AVANZAR(id)");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func ::= AVANZAR LPAR NUM RPAR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla FUNC - AVANZAR(num)");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= ID 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla EXPR - ID");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= valog 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla EXPR - VALOG");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= NUM 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla EXPR - NUM");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= sentif 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla SENT - SENTIF");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= cfor 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla SENT - CFOR");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= asigna 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla SENT - ASIGNA");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= ciclow 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla SENT - CICLOW");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= declar 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla SENT - DECLAR");		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= func 
            {
              NodoBase RESULT =null;
		
 				System.out.println("Regla SENT - FUNC");	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seq ::= sent 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla SEQ 3");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seq ::= sent PCOMA 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla SEQ 2");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // seq ::= sent PCOMA seq 
            {
              NodoBase RESULT =null;
		 
				System.out.println("Regla SEQ 1");
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase start_val = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= PROG LPAR RPAR LBRACK seq RBRACK 
            {
              NodoBase RESULT =null;
		 
		System.out.println("Regla programa");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

