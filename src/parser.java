
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 30 12:08:07 VET 2013
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 30 12:08:07 VET 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\010\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\005\006\000\002\005" +
    "\006\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\006\004\000\002\006\007\000" +
    "\002\006\004\000\002\006\007\000\002\013\003\000\002" +
    "\013\003\000\002\007\012\000\002\011\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\003\000\002" +
    "\016\005\000\002\020\004\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\003\000\002\012\011\000" +
    "\002\012\015\000\002\010\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\004\004\001\002\000\004\022\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\023\010\001\002\000\004\040\011\001\002\000" +
    "\030\006\015\007\014\011\016\035\033\036\012\037\031" +
    "\046\024\047\026\050\022\051\030\052\032\001\002\000" +
    "\004\006\171\001\002\000\006\024\ufffc\041\ufffc\001\002" +
    "\000\004\022\157\001\002\000\004\013\155\001\002\000" +
    "\004\040\146\001\002\000\006\024\ufff8\041\ufff8\001\002" +
    "\000\006\024\ufff7\041\ufff7\001\002\000\004\041\145\001" +
    "\002\000\004\022\143\001\002\000\006\024\ufffb\041\ufffb" +
    "\001\002\000\004\022\136\001\002\000\006\024\ufffa\041" +
    "\ufffa\001\002\000\004\022\134\001\002\000\006\024\ufff9" +
    "\041\ufff9\001\002\000\004\022\132\001\002\000\004\006" +
    "\126\001\002\000\004\022\124\001\002\000\004\022\037" +
    "\001\002\000\006\024\035\041\ufffd\001\002\000\032\006" +
    "\015\007\014\011\016\035\033\036\012\037\031\041\ufffe" +
    "\046\024\047\026\050\022\051\030\052\032\001\002\000" +
    "\004\041\uffff\001\002\000\004\006\015\001\002\000\004" +
    "\024\041\001\002\000\014\005\043\006\042\022\047\044" +
    "\046\045\050\001\002\000\046\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\041\ufff4\043\ufff4\001\002\000\046\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\041\ufff6\043\ufff6\001\002\000\004\024\066\001\002" +
    "\000\046\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\041\ufff5\043\ufff5\001" +
    "\002\000\046\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\041\uffe9\043\uffe9" +
    "\001\002\000\014\005\043\006\042\022\047\044\046\045" +
    "\050\001\002\000\046\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\041\uffe8" +
    "\043\uffe8\001\002\000\024\014\053\015\052\017\056\020" +
    "\055\021\054\023\uffd3\024\uffd3\041\uffd3\043\uffd3\001\002" +
    "\000\014\005\043\006\042\022\047\044\046\045\050\001" +
    "\002\000\014\005\043\006\042\022\047\044\046\045\050" +
    "\001\002\000\014\005\043\006\042\022\047\044\046\045" +
    "\050\001\002\000\014\005\043\006\042\022\047\044\046" +
    "\045\050\001\002\000\014\005\043\006\042\022\047\044" +
    "\046\045\050\001\002\000\012\023\uffd7\024\uffd7\041\uffd7" +
    "\043\uffd7\001\002\000\012\023\uffd8\024\uffd8\041\uffd8\043" +
    "\uffd8\001\002\000\012\023\uffd6\024\uffd6\041\uffd6\043\uffd6" +
    "\001\002\000\012\023\uffd9\024\uffd9\041\uffd9\043\uffd9\001" +
    "\002\000\012\023\uffd5\024\uffd5\041\uffd5\043\uffd5\001\002" +
    "\000\004\023\065\001\002\000\012\023\uffd4\024\uffd4\041" +
    "\uffd4\043\uffd4\001\002\000\014\005\043\006\042\022\070" +
    "\044\046\045\050\001\002\000\004\023\120\001\002\000" +
    "\004\034\115\001\002\000\026\016\100\023\uffdc\025\077" +
    "\026\076\027\075\030\073\031\074\032\072\033\102\034" +
    "\101\001\002\000\014\005\043\006\042\022\070\044\046" +
    "\045\050\001\002\000\014\005\043\006\042\022\070\044" +
    "\046\045\050\001\002\000\014\005\043\006\042\022\070" +
    "\044\046\045\050\001\002\000\014\005\043\006\042\022" +
    "\070\044\046\045\050\001\002\000\014\005\043\006\042" +
    "\022\070\044\046\045\050\001\002\000\014\005\043\006" +
    "\042\022\070\044\046\045\050\001\002\000\014\005\043" +
    "\006\042\022\070\044\046\045\050\001\002\000\014\005" +
    "\043\006\042\022\070\044\046\045\050\001\002\000\014" +
    "\005\043\006\042\022\070\044\046\045\050\001\002\000" +
    "\004\023\uffde\001\002\000\004\023\uffdd\001\002\000\004" +
    "\023\uffe1\001\002\000\004\023\uffe5\001\002\000\004\023" +
    "\uffe4\001\002\000\004\023\uffe3\001\002\000\004\023\uffe0" +
    "\001\002\000\004\023\uffe2\001\002\000\004\023\uffdf\001" +
    "\002\000\004\023\117\001\002\000\012\005\043\006\042" +
    "\044\046\045\050\001\002\000\004\023\uffda\001\002\000" +
    "\004\023\uffdb\001\002\000\004\040\121\001\002\000\030" +
    "\006\015\007\014\011\016\035\033\036\012\037\031\046" +
    "\024\047\026\050\022\051\030\052\032\001\002\000\004" +
    "\041\123\001\002\000\006\024\uffd0\041\uffd0\001\002\000" +
    "\004\023\125\001\002\000\006\024\uffee\041\uffee\001\002" +
    "\000\010\024\uffeb\041\uffeb\042\127\001\002\000\014\005" +
    "\043\006\042\022\047\044\046\045\050\001\002\000\004" +
    "\043\131\001\002\000\006\024\uffea\041\uffea\001\002\000" +
    "\004\023\133\001\002\000\006\024\uffef\041\uffef\001\002" +
    "\000\004\023\135\001\002\000\006\024\ufff1\041\ufff1\001" +
    "\002\000\004\005\137\001\002\000\004\023\142\001\002" +
    "\000\004\023\141\001\002\000\006\024\ufff2\041\ufff2\001" +
    "\002\000\006\024\ufff3\041\ufff3\001\002\000\004\023\144" +
    "\001\002\000\006\024\ufff0\041\ufff0\001\002\000\004\002" +
    "\001\001\002\000\030\006\015\007\014\011\016\035\033" +
    "\036\012\037\031\046\024\047\026\050\022\051\030\052" +
    "\032\001\002\000\004\041\150\001\002\000\004\012\151" +
    "\001\002\000\004\022\152\001\002\000\014\005\043\006" +
    "\042\022\070\044\046\045\050\001\002\000\004\023\154" +
    "\001\002\000\006\024\uffe7\041\uffe7\001\002\000\014\005" +
    "\043\006\042\022\047\044\046\045\050\001\002\000\006" +
    "\024\uffe6\041\uffe6\001\002\000\014\005\043\006\042\022" +
    "\070\044\046\045\050\001\002\000\004\023\161\001\002" +
    "\000\004\040\162\001\002\000\030\006\015\007\014\011" +
    "\016\035\033\036\012\037\031\046\024\047\026\050\022" +
    "\051\030\052\032\001\002\000\004\041\164\001\002\000" +
    "\010\010\165\024\uffd2\041\uffd2\001\002\000\004\040\166" +
    "\001\002\000\030\006\015\007\014\011\016\035\033\036" +
    "\012\037\031\046\024\047\026\050\022\051\030\052\032" +
    "\001\002\000\004\041\170\001\002\000\006\024\uffd1\041" +
    "\uffd1\001\002\000\010\024\uffed\041\uffed\042\172\001\002" +
    "\000\014\005\043\006\042\022\047\044\046\045\050\001" +
    "\002\000\004\043\174\001\002\000\006\024\uffec\041\uffec" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\020\004\033\005\012\006\022\007" +
    "\024\010\016\011\026\012\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\035\004\033" +
    "\005\012\006\022\007\024\010\016\011\026\012\017\001" +
    "\001\000\002\001\001\000\004\011\037\001\001\000\002" +
    "\001\001\000\010\013\044\015\050\017\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\044\015\050\017" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\044\015\050\017\062\001\001\000\010\013\044\015" +
    "\050\017\061\001\001\000\010\013\044\015\050\017\060" +
    "\001\001\000\010\013\044\015\050\017\057\001\001\000" +
    "\010\013\044\015\050\017\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\044\015\070\016\066\001\001\000\002\001\001\000" +
    "\004\020\113\001\001\000\002\001\001\000\010\013\044" +
    "\015\070\016\112\001\001\000\010\013\044\015\070\016" +
    "\111\001\001\000\010\013\044\015\070\016\110\001\001" +
    "\000\010\013\044\015\070\016\107\001\001\000\010\013" +
    "\044\015\070\016\106\001\001\000\010\013\044\015\070" +
    "\016\105\001\001\000\010\013\044\015\070\016\104\001" +
    "\001\000\010\013\044\015\070\016\103\001\001\000\010" +
    "\013\044\015\070\016\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\044" +
    "\015\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\121\004\033\005\012\006\022" +
    "\007\024\010\016\011\026\012\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\044\015\050\017\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\146\004\033" +
    "\005\012\006\022\007\024\010\016\011\026\012\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\044\015\070\016\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\044\015\050\017\155" +
    "\001\001\000\002\001\001\000\010\013\044\015\070\016" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\162\004\033\005\012\006\022\007\024\010\016\011" +
    "\026\012\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\166\004\033\005\012\006" +
    "\022\007\024\010\016\011\026\012\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\044\015\050\017\172\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast = null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cfor ::= FOR LPAR asigna PCOMA expa PCOMA expl RPAR LBRACK seq RBRACK 
            {
              NodoBase RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodoBase as = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase inc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			System.out.println("Regla CFOR");
			RESULT = new NodoFor(as,prueba,inc,lista);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cfor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentif ::= IF LPAR expl RPAR LBRACK seq RBRACK ELSE LBRACK seq RBRACK 
            {
              NodoBase RESULT =null;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int selseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int selseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase selse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			System.out.println("Regla SENTIF - IF-ELSE");
			RESULT = new NodoIf(prueba, lista, selse);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentif",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentif ::= IF LPAR expl RPAR LBRACK seq RBRACK 
            {
              NodoBase RESULT =null;
		int testleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase test = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			System.out.println("Regla SENTIF - IF simple");
			RESULT = new NodoIf(test, lista);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentif",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expa ::= expr 
            {
              NodoBase RESULT =null;
		int expreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase expre = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPL - 2");
			RESULT = expre;			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expa ::= LPAR expa RPAR 
            {
              NodoBase RESULT =null;
		int expeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int experight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase expe = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			System.out.println("Regla EXPA - (expa) ");
			RESULT = expe;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expa ::= expr MOD expa 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPA - %");
			RESULT = new NodoOperacion(eI,tipoOp.modulo,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expa ::= expr ENTRE expa 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPA - /");
			RESULT = new NodoOperacion(eI,tipoOp.entre,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expa ::= expr POR expa 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPA - *");
			RESULT = new NodoOperacion(eI,tipoOp.por,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expa ::= expr MENOS expa 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPA - -");
			RESULT = new NodoOperacion(eI,tipoOp.menos,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expa ::= expr MAS expa 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPA - +");
			RESULT = new NodoOperacion(eI,tipoOp.mas,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expa",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expn ::= NOT expr 
            {
              NodoBase RESULT =null;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ext = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPN ");
			RESULT = new NodoOperacion( ext, tipoOp.no , null); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expn",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expl ::= LPAR expn RPAR 
            {
              NodoBase RESULT =null;
		int expenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase expen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			System.out.println("Regla EXPL - (EXPN)");
			RESULT = expen;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expl ::= expr 
            {
              NodoBase RESULT =null;
		int expreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expreright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase expre = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPL - 2");
			RESULT = expre;			
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expl ::= expr NOT expl 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPL - !");
			RESULT = new NodoOperacion(eI,tipoOp.no,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expl ::= expr OR expl 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPL - ||");
			RESULT = new NodoOperacion(eI,tipoOp.o,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expl ::= expr AND expl 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPL - &&");
			RESULT = new NodoOperacion(eI,tipoOp.y,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expl ::= expr DIF expl 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPL - <>");
			RESULT = new NodoOperacion(eI,tipoOp.diferente,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expl ::= expr IGUAL expl 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPL - =");
			RESULT = new NodoOperacion(eI,tipoOp.igual,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expl ::= expr mIGUAL expl 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPL - <=");
			RESULT = new NodoOperacion(eI,tipoOp.menorigual,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expl ::= expr MIGUAL expl 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPL - >=");
			RESULT = new NodoOperacion(eI,tipoOp.mayorigual,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expl ::= expr mQ expl 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPL - <");
			RESULT = new NodoOperacion(eI,tipoOp.menor,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expl ::= expr MQ expl 
            {
              NodoBase RESULT =null;
		int eIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase eI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase eD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla EXPL - >");
			RESULT = new NodoOperacion(eI,tipoOp.mayor,eD);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asigna ::= ID ASIGNA expa 
            {
              NodoBase RESULT =null;
		int aidileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aidiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aidi = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expaaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expaaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase expaa = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			System.out.println("Regla ASIGNA ");
			RESULT = new NodoAsignacion(new NodoIdentificador(aidi.toString()), expaa);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigna",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ciclow ::= DO LBRACK seq RBRACK WHILE LPAR expl RPAR 
            {
              NodoBase RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase lista = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase test = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			System.out.println("Regla CICLOW");
			RESULT = new NodoWhile(test, lista);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclow",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valog ::= FALSE 
            {
              NodoBase RESULT =null;
		
			System.out.println("FALSE");
			RESULT = new NodoBool(false);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valog",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valog ::= TRUE 
            {
              NodoBase RESULT =null;
		
			System.out.println("TRUE");
			RESULT = new NodoBool(true);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valog",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declar ::= BOOL ID LCOR expa RCOR 
            {
              NodoBase RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase exp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				System.out.println("Regla DECL - BOOOOOOOOLL IDENT[expa]");
				RESULT = new NodoVector(new NodoIdentificador(ident.toString()), Integer.parseInt(exp.toString()) , 1);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declar ::= BOOL ID 
            {
              NodoBase RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Regla DECLAR - BOOL IDENT");
				RESULT = new NodoIdentificador(ident.toString(), 1);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declar ::= INT ID LCOR expa RCOR 
            {
              NodoBase RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase exp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				System.out.println("Regla DECL - INT IDENT[expa]");
				RESULT =  new NodoVector(new NodoIdentificador(ident.toString()), Integer.parseInt(exp.toString()) , 0);					
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declar ::= INT ID 
            {
              NodoBase RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Regla DECLAR - INT IDENT ");			
				RESULT = new NodoIdentificador(ident.toString(), 0);		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declar",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // func ::= MIRARDER LPAR RPAR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla FUNC - MIRARDER()");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // func ::= MIRARIZQ LPAR RPAR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla FUNC - MIRARIZQ()");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // func ::= MIRARARRIBA LPAR RPAR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla FUNC - MIRARARRIBA()");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func ::= MIRARABAJO LPAR RPAR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla FUNC - MIRARABAJO()");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func ::= AVANZAR LPAR ident RPAR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla FUNC - AVANZAR(id)");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func ::= AVANZAR LPAR NUM RPAR 
            {
              NodoBase RESULT =null;
		
				System.out.println("Regla FUNC - AVANZAR(num)");
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= ID 
            {
              NodoBase RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Regla EXPR - ID");
				RESULT = new NodoIdentificador(ident.toString(),-1);
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= valog 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Regla EXPR - VALOG");
				RESULT = valor;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Regla EXPR - NUM");
					if(valor!=null){
						RESULT= new NodoValor(Integer.parseInt(valor.toString()));					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= sentif 
            {
              NodoBase RESULT =null;
		int sent_ifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sent_ifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent_if = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Regla SENT - SENTIF");
				RESULT = sent_if;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= cfor 
            {
              NodoBase RESULT =null;
		int cforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Regla SENT - CFOR");
				RESULT = cfor;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= asigna 
            {
              NodoBase RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase asig = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Regla SENT - ASIGNA");
				RESULT = asig;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= ciclow 
            {
              NodoBase RESULT =null;
		int cicloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cicloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ciclo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Regla SENT - CICLOW");
				RESULT = ciclo;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= declar 
            {
              NodoBase RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase decl = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Regla SENT - DECLAR");	
				RESULT = (NodoIdentificador)decl;	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= func 
            {
              NodoBase RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
 				System.out.println("Regla SENT - FUNC");	
 				RESULT = fun;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seq ::= sent 
            {
              NodoBase RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				System.out.println("Regla SEQ 3");
				RESULT = sen;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seq ::= sent PCOMA 
            {
              NodoBase RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				System.out.println("Regla SEQ 2");
				RESULT = sen;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // seq ::= sent PCOMA seq 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				System.out.println("Regla SEQ 1");
					NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
				
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase start_val = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= PROG LPAR RPAR LBRACK seq RBRACK 
            {
              NodoBase RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
		System.out.println("Regla programa");
		ast = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

