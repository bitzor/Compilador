// Especificaci칩n sint치ctica en CUP para el lenguaje tiny
package parser;
import java_cup.runtime.*;
import util.Utilidades;
import lexer.*;
import tabla.*;
import ast.*;

action code {: 

    int getLinea() {
	return ((TinyLexer)parser.getScanner()).getLinea();
    }

    int getColumna(){
        return ((TinyLexer)parser.getScanner()).getColumna();
    }

    SimboloAbstracto getNombreArchivo() {
	return ((TinyLexer)parser.getScanner()).getNombreArchivo();
    }
:} 

parser code {:
    int omerrs = 0;

    public int getOmerrs(){
        return omerrs;
    }

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.getLinea();
        int column = action_obj.getColumna();
		String filename = action_obj.getNombreArchivo().getTexto();
        System.err.print(filename + ": " + lineno 
		         + ":" + column + ": error de sint치xis cerca de ");
        Utilidades.imprimirToken(cur_token);
		omerrs++;
		if (omerrs>50) {
		   System.err.println("El an치lisis se ha detenido porque se encontraron muchos errores");
		   System.exit(1);
		}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

terminal SimboloAbstracto SUMA, RESTA, DIVISION, MULTIPLICACION, PUNTO_Y_COMA, COMA;
terminal SimboloAbstracto MENOR, IGUAL, PARENT_IZQ, PARENT_DER, ASIGNACION;
terminal SimboloAbstracto LIT_ENTERO, IDENTIFICADOR;
terminal SimboloAbstracto SI, ENTONCES, SINO, FIN, REPITA, HASTA, ERROR, LEER, ESCRIBIR;

nonterminal Programa programa;
nonterminal ListaSentencia secuencia_sent;
nonterminal Sentencia sent;
nonterminal Sentencia sent_if;
nonterminal Sentencia sent_repeat;
nonterminal Sentencia sent_assign;
nonterminal Sentencia fuction_call;
nonterminal ListaParametros opt_args;
nonterminal ListaParametros args;
nonterminal Expresion exp;
nonterminal Expresion exp_simple;
nonterminal Expresion term;
nonterminal Expresion factor;

programa 
    ::= secuencia_sent:sc
    {:
        RESULT = new Programa(sc, 1, 0);
    :}
    ;

secuencia_sent 
    ::= secuencia_sent:sc PUNTO_Y_COMA sent:s
    {:
        sc.agregarElemento(s);
        RESULT = sc;
    :}
    | sent:s 
    {:
        RESULT = (new ListaSentencia(getLinea(), getColumna()));
        RESULT.agregarElemento(s);
    :}
    ;

sent 
    ::= sent_if:s {: RESULT = s; :}
    | sent_repeat:s {: RESULT = s; :}
    | sent_assign:s {: RESULT = s; :}
    | fuction_call:s {: RESULT = s; :}
    ;

sent_if 
    ::= SI:s exp:c ENTONCES secuencia_sent:en FIN
    {:
        RESULT = new Condicional(c, en, null, s.getLinea(), s.getColumna());
    :}
    | SI:s exp:c ENTONCES secuencia_sent:en SINO secuencia_sent:sn FIN
    {:
        RESULT = new Condicional(c, en, sn, s.getLinea(), s.getColumna());
    :}
    ;

sent_repeat 
    ::= REPITA:r secuencia_sent:s HASTA exp:c
    {:
        RESULT = new RepitaHasta(c, s, r.getLinea(), r.getColumna());
    :}
    ;

sent_assign 
    ::= IDENTIFICADOR:id ASIGNACION:a exp:e
    {:
        RESULT = new Asignacion(new Variable(id, id.getLinea(), id.getColumna()), e, a.getLinea(), a.getColumna());
    :}
    ;

fuction_call
    ::= IDENTIFICADOR:id opt_args:p
    {:
        RESULT = new LLamadaFuncion(id, p, id.getLinea(), id.getColumna());
    :}
    ;

opt_args
    ::= args:p
    {:
        RESULT = p;
    :}
    | 
    {:
        RESULT = new ListaParametros(getLinea(), getColumna());
    :}
    ;

args
    ::= exp:e
    {:
        RESULT = (new ListaParametros(getLinea(), getColumna()));
        RESULT.agregarElemento(e);
    :}
    | exp:e COMA args:p
    {:
        p.agregarElemento(e);
        RESULT = p;
    :}
    ;

exp 
    ::= exp_simple:e1 MENOR:m exp_simple:e2 
    {:
        RESULT = new Menor(e1, e2, m.getLinea(), m.getColumna());
    :}
    | exp_simple:e1 IGUAL:i exp_simple:e2
    {:
        RESULT = new Igual(e1, e2, i.getLinea(), i.getColumna());
    :} 
    | exp_simple:e
    {:
        RESULT = e;
    :}
    ;

exp_simple
    ::= exp_simple:e1 SUMA:s term:e2
    {:
        RESULT = new Suma(e1, e2, s.getLinea(), s.getColumna());
    :}
    | exp_simple:e1 RESTA:r term:e2
    {:
        RESULT = new Resta(e1, e2, r.getLinea(), r.getColumna());
    :}
    | term:e
    {:
        RESULT = e;
    :}
    ;

term   
    ::= term:e1 MULTIPLICACION:m factor:e2
    {:
        RESULT = new Multiplicacion(e1, e2, m.getLinea(), m.getColumna());
    :}
    | term:e1 DIVISION:d factor:e2
    {:
        RESULT = new Division(e1, e2, d.getLinea(), d.getColumna());
    :}
    | factor:e
    {:
        RESULT = e;
    :}
    ;

factor 
    ::= PARENT_IZQ exp:e PARENT_DER
    {:
        RESULT = e;
    :}
    | LIT_ENTERO:val
    {:
        RESULT = new NumeroEntero(val, val.getLinea(), val.getColumna());
    :}
    | IDENTIFICADOR:id
    {:
        RESULT = new Variable(id, id.getLinea(), id.getColumna());
    :}
    | error
    ;
